import datetime
from calendar import Calendar
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup


month_names = {1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å",
               7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"}


async def make_month_calendar(month=None, year=None):
    today = datetime.date.today()
    calendar = Calendar()
    if month is None:
        month = today.month
    if year is None:
        year = today.year
    dates = calendar.monthdatescalendar(year, month)
    return dates, month, year, today


async def main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç—ë–∂"))
    keyboard.add(KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä"))
    keyboard.add(KeyboardButton(text="‚öôÔ∏è"))
    return keyboard


async def payment_company_keyboard(companies):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for company in companies:
        keyboard.add(InlineKeyboardButton(text=company["name"],
                                          callback_data=f"payment_company_{company['company_id']}"))
    keyboard.add(InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def payment_facility_keyboard(facilities):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for facility in facilities:
        keyboard.add(InlineKeyboardButton(text=facility["name"],
                                          callback_data=f"payment_facility_{facility['facility_id']}"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def payment_choice_keyboard():
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞",
                                      callback_data="payment_purpose"))
    keyboard.add(InlineKeyboardButton(text="–ü–æ–¥ –æ—Ç—á—ë—Ç",
                                      callback_data="payment_user"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def payment_purpose_type_keyboard(purpose_types):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for purpose_type in purpose_types:
        keyboard.add(InlineKeyboardButton(text=purpose_type["name"],
                                          callback_data=f"payment_purpose_type_{purpose_type['type_id']}"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def payment_purpose_keyboard(purposes):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for purpose in purposes:
        keyboard.add(InlineKeyboardButton(text=purpose["name"],
                                          callback_data=f"payment_purpose_{purpose['purpose_id']}"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def payment_users_keyboard(users):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for user in users:
        keyboard.add(InlineKeyboardButton(text=user["name"],
                                          callback_data=f"payment_user_{user['user_id']}"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def payment_send_keyboard():
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.add(InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
                                      callback_data="payment_send_without_comment"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def settings_keyboard():
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.add(InlineKeyboardButton(text="–ö–æ–º–ø–∞–Ω–∏–∏/–æ–±—ä–µ–∫—Ç—ã",
                                      callback_data="settings_companies"))
    keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è",
                                      callback_data="settings_purpose_types"))
    keyboard.add(InlineKeyboardButton(text="–õ—é–¥–∏",
                                      callback_data="settings_users"))
    keyboard.add(InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def settings_companies_keyboard(companies):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for company in companies:
        if company["status"]:
            company["status"] = "üü¢"
        else:
            company["status"] = "üî¥"
        keyboard.row(InlineKeyboardButton(text=company["name"],
                                          callback_data="nothing"),
                     InlineKeyboardButton(text="–û–±—ä–µ–∫—Ç—ã",
                                          callback_data=f"settings_facilities_in_company_{company['company_id']}"),
                     InlineKeyboardButton(text=company["status"],
                                          callback_data=f"settings_company_change_status_{company['company_id']}"),
                     InlineKeyboardButton(text="üóëÔ∏è",
                                          callback_data=f"settings_company_delete_{company['company_id']}"))
    keyboard.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ö–æ–º–ø–∞–Ω–∏—é",
                                      callback_data="settings_company_add"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def settings_facilities_keyboard(facilities):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for facility in facilities:
        if facility["status"]:
            facility["status"] = "üü¢"
        else:
            facility["status"] = "üî¥"
        keyboard.row(InlineKeyboardButton(text=facility["name"],
                                          callback_data="nothing"),
                     InlineKeyboardButton(text=facility["status"],
                                          callback_data=f"settings_facility_change_status_{facility['facility_id']}"),
                     InlineKeyboardButton(text="üóëÔ∏è",
                                          callback_data=f"settings_facility_delete_{facility['facility_id']}"))
    keyboard.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç",
                                      callback_data="settings_facility_add"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def settings_purpose_types_keyboard(purpose_types):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for purpose_type in purpose_types:
        if purpose_type["status"]:
            purpose_type["status"] = "üü¢"
        else:
            purpose_type["status"] = "üî¥"
        keyboard.row(InlineKeyboardButton(text=purpose_type["name"],
                                          callback_data="nothing"),
                     InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è",
                                          callback_data=f"settings_purposes_in_purpose_type_{purpose_type['type_id']}"),
                     InlineKeyboardButton(text=purpose_type["status"],
                                          callback_data=f"settings_purpose_type_change_status_{purpose_type['type_id']}"),
                     InlineKeyboardButton(text="üóëÔ∏è",
                                          callback_data=f"settings_purpose_type_delete_{purpose_type['type_id']}"))
    keyboard.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
                                      callback_data="settings_purpose_type_add"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def settings_purposes_keyboard(purposes):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for purpose in purposes:
        if purpose["status"]:
            purpose["status"] = "üü¢"
        else:
            purpose["status"] = "üî¥"
        keyboard.row(InlineKeyboardButton(text=purpose["name"],
                                          callback_data="nothing"),
                     InlineKeyboardButton(text=purpose["status"],
                                          callback_data=f"settings_purpose_change_status_{purpose['purpose_id']}"),
                     InlineKeyboardButton(text="üóëÔ∏è",
                                          callback_data=f"settings_purpose_delete_{purpose['purpose_id']}"))
    keyboard.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
                                      callback_data="settings_purpose_add"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def settings_users_keyboard(users):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for user in users:
        if user["status"]:
            user["status"] = "üü¢"
        else:
            user["status"] = "üî¥"
        keyboard.row(InlineKeyboardButton(text=user["name"],
                                          callback_data="nothing"))
        buttons = [InlineKeyboardButton(text=str(user["balance"]),
                                        callback_data="nothing"),
                   InlineKeyboardButton(text="–°–ø–∏—Å–∞—Ç—å –±–∞–ª–∞–Ω—Å",
                                        callback_data=f"settings_user_clear_balance_{user['user_id']}")]
        if user["secret_key"]:
            buttons.append(InlineKeyboardButton(text="–ü–∞—Ä–æ–ª—å",
                                                callback_data=f"settings_user_secret_key_{user['user_id']}"))
        buttons.append(InlineKeyboardButton(text="üóëÔ∏è",
                                            callback_data=f"settings_user_delete_{user['user_id']}"))
        keyboard.row(*buttons)
    keyboard.add(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
                                      callback_data="settings_user_add"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def view_keyboard():
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.add(InlineKeyboardButton(text="–°–≤–æ–¥ - –≤—Å–µ –ø—É–Ω–∫—Ç—ã",
                                      callback_data="view_all"))
    keyboard.add(InlineKeyboardButton(text="–û—Ç—á—ë—Ç –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏",
                                      callback_data="view_company"))
    keyboard.add(InlineKeyboardButton(text="–û—Ç—á—ë—Ç –ø–æ –æ–±—ä–µ–∫—Ç—É",
                                      callback_data="view_facility"))
    keyboard.add(InlineKeyboardButton(text="–û—Ç—á—ë—Ç –ø–æ —Ç–∏–ø—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
                                      callback_data="view_purpose_type"))
    keyboard.add(InlineKeyboardButton(text="–û—Ç—á—ë—Ç –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é",
                                      callback_data="view_purpose"))
    keyboard.add(InlineKeyboardButton(text="–û—Ç—á—ë—Ç –ø–æ –ø–æ–¥–æ—Ç—á—ë—Ç–Ω–æ–º—É",
                                      callback_data="view_user"))
    keyboard.add(InlineKeyboardButton(text="–û—Ç—á—ë—Ç –ø–æ –∞–≤—Ç–æ—Ä—É",
                                      callback_data="view_creator"))
    keyboard.add(InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def view_company_keyboard(companies):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for company in companies:
        keyboard.add(InlineKeyboardButton(text=company["name"],
                                          callback_data=f"view_company_{company['company_id']}"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def view_facility_keyboard(facilities):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for facility in facilities:
        keyboard.add(InlineKeyboardButton(text=facility["name"],
                                          callback_data=f"view_facility_{facility['facility_id']}"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def view_purpose_type_keyboard(purpose_types):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for purpose_type in purpose_types:
        keyboard.add(InlineKeyboardButton(text=purpose_type["name"],
                                          callback_data=f"view_purpose_type_{purpose_type['type_id']}"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def view_purpose_keyboard(purposes):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for purpose in purposes:
        keyboard.add(InlineKeyboardButton(text=purpose["name"],
                                          callback_data=f"view_purpose_{purpose['purpose_id']}"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def view_user_keyboard(users):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for user in users:
        keyboard.add(InlineKeyboardButton(text=user["name"],
                                          callback_data=f"view_user_{user['user_id']}"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def view_creator_keyboard(users):
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    for user in users:
        keyboard.add(InlineKeyboardButton(text=user["name"],
                                          callback_data=f"view_creator_{user['tg_id']}"))
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def calendar_keyboard(month=None, year=None):
    calendar, month, year, today = await make_month_calendar(month, year)
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(text="‚óÄÔ∏è",
                                      callback_data=f"calendar_year_back_{month}_{year}"),
                 InlineKeyboardButton(text=year,
                                      callback_data="nothing"),
                 InlineKeyboardButton(text="‚ñ∂Ô∏è",
                                      callback_data=f"calendar_year_forward_{month}_{year}"))
    keyboard.row(InlineKeyboardButton(text="‚óÄÔ∏è",
                                      callback_data=f"calendar_month_back_{month}_{year}"),
                 InlineKeyboardButton(text=month_names[month],
                                      callback_data="nothing"),
                 InlineKeyboardButton(text="‚ñ∂Ô∏è",
                                      callback_data=f"calendar_month_forward_{month}_{year}"))
    for week in calendar:
        button_list = []
        for day in week:
            if day.month != month:
                button_list.append(InlineKeyboardButton(text=" ",
                                                        callback_data=f"nothing"))
            elif day == today:
                button_list.append(InlineKeyboardButton(text=f"üü¢{day.day}",
                                                        callback_data=f"date_{day}"))
            else:
                button_list.append(InlineKeyboardButton(text=str(day.day),
                                                        callback_data=f"date_{day}"))
        keyboard.row(*button_list)
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def yes_no_keyboard():
    keyboard = InlineKeyboardMarkup(resize_keyboard=True)
    keyboard.add(InlineKeyboardButton(text="–î–∞",
                                      callback_data="yes"))
    keyboard.add(InlineKeyboardButton(text="–ù–µ—Ç",
                                      callback_data="back"))
    return keyboard


async def back_cancel_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"),
                 InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard


async def back_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="‚Ü©Ô∏è",
                                      callback_data="back"))
    return keyboard


async def cancel_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton(text="üö´",
                                      callback_data="cancel"))
    return keyboard
